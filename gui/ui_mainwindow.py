# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'mainwindow.ui'
##
## Created by: Qt User Interface Compiler version 6.5.2
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QBrush, QColor, QConicalGradient, QCursor,
    QFont, QFontDatabase, QGradient, QIcon,
    QImage, QKeySequence, QLinearGradient, QPainter,
    QPalette, QPixmap, QRadialGradient, QTransform)
from PySide6.QtWidgets import (QApplication, QCheckBox, QGroupBox, QLabel,
    QLineEdit, QMainWindow, QPushButton, QSizePolicy,
    QSlider, QStatusBar, QTabWidget, QTextEdit,
    QWidget)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(610, 720)
        sizePolicy = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QSize(610, 720))
        MainWindow.setMaximumSize(QSize(610, 720))
        MainWindow.setBaseSize(QSize(610, 740))
        MainWindow.setContextMenuPolicy(Qt.NoContextMenu)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.groupBox_StdOut = QGroupBox(self.centralwidget)
        self.groupBox_StdOut.setObjectName(u"groupBox_StdOut")
        self.groupBox_StdOut.setGeometry(QRect(10, 500, 591, 191))
        self.textEdit_StdOut = QTextEdit(self.groupBox_StdOut)
        self.textEdit_StdOut.setObjectName(u"textEdit_StdOut")
        self.textEdit_StdOut.setEnabled(True)
        self.textEdit_StdOut.setGeometry(QRect(6, 24, 580, 161))
        sizePolicy.setHeightForWidth(self.textEdit_StdOut.sizePolicy().hasHeightForWidth())
        self.textEdit_StdOut.setSizePolicy(sizePolicy)
        self.textEdit_StdOut.setStyleSheet(u"background-color: rgb(0, 0, 0);\n"
"font: 9pt \"Consolas\";\n"
"color: rgb(0, 200, 0);")
        self.textEdit_StdOut.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.textEdit_StdOut.setReadOnly(True)
        self.tabWidget_Selection = QTabWidget(self.centralwidget)
        self.tabWidget_Selection.setObjectName(u"tabWidget_Selection")
        self.tabWidget_Selection.setGeometry(QRect(10, 60, 591, 101))
        self.file_selection = QWidget()
        self.file_selection.setObjectName(u"file_selection")
        self.groupBox_inputFiles = QGroupBox(self.file_selection)
        self.groupBox_inputFiles.setObjectName(u"groupBox_inputFiles")
        self.groupBox_inputFiles.setGeometry(QRect(10, 10, 571, 51))
        self.lineEdit_inputFiles = QLineEdit(self.groupBox_inputFiles)
        self.lineEdit_inputFiles.setObjectName(u"lineEdit_inputFiles")
        self.lineEdit_inputFiles.setGeometry(QRect(10, 24, 471, 22))
        sizePolicy.setHeightForWidth(self.lineEdit_inputFiles.sizePolicy().hasHeightForWidth())
        self.lineEdit_inputFiles.setSizePolicy(sizePolicy)
        self.button_inputFiles = QPushButton(self.groupBox_inputFiles)
        self.button_inputFiles.setObjectName(u"button_inputFiles")
        self.button_inputFiles.setGeometry(QRect(490, 24, 75, 22))
        self.tabWidget_Selection.addTab(self.file_selection, "")
        self.batch_processing = QWidget()
        self.batch_processing.setObjectName(u"batch_processing")
        self.groupBox_inputDirectory = QGroupBox(self.batch_processing)
        self.groupBox_inputDirectory.setObjectName(u"groupBox_inputDirectory")
        self.groupBox_inputDirectory.setGeometry(QRect(10, 10, 571, 51))
        self.lineEdit_inputDirectory = QLineEdit(self.groupBox_inputDirectory)
        self.lineEdit_inputDirectory.setObjectName(u"lineEdit_inputDirectory")
        self.lineEdit_inputDirectory.setGeometry(QRect(10, 24, 471, 22))
        sizePolicy.setHeightForWidth(self.lineEdit_inputDirectory.sizePolicy().hasHeightForWidth())
        self.lineEdit_inputDirectory.setSizePolicy(sizePolicy)
        self.button_inputDirectory = QPushButton(self.groupBox_inputDirectory)
        self.button_inputDirectory.setObjectName(u"button_inputDirectory")
        self.button_inputDirectory.setGeometry(QRect(490, 24, 75, 22))
        self.tabWidget_Selection.addTab(self.batch_processing, "")
        self.pushButton_StartSeparation = QPushButton(self.centralwidget)
        self.pushButton_StartSeparation.setObjectName(u"pushButton_StartSeparation")
        self.pushButton_StartSeparation.setGeometry(QRect(460, 280, 141, 211))
        sizePolicy.setHeightForWidth(self.pushButton_StartSeparation.sizePolicy().hasHeightForWidth())
        self.pushButton_StartSeparation.setSizePolicy(sizePolicy)
        self.groupBox_Settings = QGroupBox(self.centralwidget)
        self.groupBox_Settings.setObjectName(u"groupBox_Settings")
        self.groupBox_Settings.setGeometry(QRect(10, 260, 441, 231))
        self.checkBox_UseCPU = QCheckBox(self.groupBox_Settings)
        self.checkBox_UseCPU.setObjectName(u"checkBox_UseCPU")
        self.checkBox_UseCPU.setGeometry(QRect(20, 100, 311, 17))
        self.checkBox_UseLargeGPU = QCheckBox(self.groupBox_Settings)
        self.checkBox_UseLargeGPU.setObjectName(u"checkBox_UseLargeGPU")
        self.checkBox_UseLargeGPU.setGeometry(QRect(20, 122, 311, 17))
        self.checkBox_GenerateVocInstOnly = QCheckBox(self.groupBox_Settings)
        self.checkBox_GenerateVocInstOnly.setObjectName(u"checkBox_GenerateVocInstOnly")
        self.checkBox_GenerateVocInstOnly.setGeometry(QRect(20, 144, 311, 17))
        self.groupBox_ChunkSize = QGroupBox(self.groupBox_Settings)
        self.groupBox_ChunkSize.setObjectName(u"groupBox_ChunkSize")
        self.groupBox_ChunkSize.setGeometry(QRect(20, 24, 401, 71))
        self.label_advice = QLabel(self.groupBox_ChunkSize)
        self.label_advice.setObjectName(u"label_advice")
        self.label_advice.setGeometry(QRect(10, 24, 381, 16))
        font = QFont()
        font.setBold(True)
        self.label_advice.setFont(font)
        self.label_advice.setStyleSheet(u"color: rgb(255, 0, 0);")
        self.label_advice.setAlignment(Qt.AlignCenter)
        self.horizontalSlider_ChunkSize = QSlider(self.groupBox_ChunkSize)
        self.horizontalSlider_ChunkSize.setObjectName(u"horizontalSlider_ChunkSize")
        self.horizontalSlider_ChunkSize.setGeometry(QRect(20, 44, 311, 22))
        self.horizontalSlider_ChunkSize.setMinimum(2)
        self.horizontalSlider_ChunkSize.setMaximum(20)
        self.horizontalSlider_ChunkSize.setSingleStep(1)
        self.horizontalSlider_ChunkSize.setPageStep(1)
        self.horizontalSlider_ChunkSize.setValue(10)
        self.horizontalSlider_ChunkSize.setOrientation(Qt.Horizontal)
        self.horizontalSlider_ChunkSize.setTickPosition(QSlider.TicksBelow)
        self.horizontalSlider_ChunkSize.setTickInterval(1)
        self.horizontalSlider_ChunkSize.setProperty("inputConversionRatio", 50000.000000000000000)
        self.label_ChunkSize = QLabel(self.groupBox_ChunkSize)
        self.label_ChunkSize.setObjectName(u"label_ChunkSize")
        self.label_ChunkSize.setGeometry(QRect(340, 44, 51, 21))
        self.label_ChunkSize.setLayoutDirection(Qt.LeftToRight)
        self.label_ChunkSize.setAlignment(Qt.AlignRight|Qt.AlignTrailing|Qt.AlignVCenter)
        self.pushButton_AdvSettings = QPushButton(self.groupBox_Settings)
        self.pushButton_AdvSettings.setObjectName(u"pushButton_AdvSettings")
        self.pushButton_AdvSettings.setGeometry(QRect(20, 200, 401, 23))
        self.checkBox_SingleONNX = QCheckBox(self.groupBox_Settings)
        self.checkBox_SingleONNX.setObjectName(u"checkBox_SingleONNX")
        self.checkBox_SingleONNX.setGeometry(QRect(20, 164, 411, 21))
        self.label_Authors = QLabel(self.centralwidget)
        self.label_Authors.setObjectName(u"label_Authors")
        self.label_Authors.setGeometry(QRect(360, 0, 241, 71))
        self.label_Title = QLabel(self.centralwidget)
        self.label_Title.setObjectName(u"label_Title")
        self.label_Title.setGeometry(QRect(20, 0, 351, 61))
        self.groupBox_OutputSettings = QGroupBox(self.centralwidget)
        self.groupBox_OutputSettings.setObjectName(u"groupBox_OutputSettings")
        self.groupBox_OutputSettings.setGeometry(QRect(10, 170, 591, 81))
        self.groupBox_OutputDirectory = QGroupBox(self.groupBox_OutputSettings)
        self.groupBox_OutputDirectory.setObjectName(u"groupBox_OutputDirectory")
        self.groupBox_OutputDirectory.setGeometry(QRect(10, 20, 571, 51))
        self.lineEdit_OutputDirectory = QLineEdit(self.groupBox_OutputDirectory)
        self.lineEdit_OutputDirectory.setObjectName(u"lineEdit_OutputDirectory")
        self.lineEdit_OutputDirectory.setGeometry(QRect(10, 24, 471, 22))
        sizePolicy.setHeightForWidth(self.lineEdit_OutputDirectory.sizePolicy().hasHeightForWidth())
        self.lineEdit_OutputDirectory.setSizePolicy(sizePolicy)
        self.button_OutputDirectory = QPushButton(self.groupBox_OutputDirectory)
        self.button_OutputDirectory.setObjectName(u"button_OutputDirectory")
        self.button_OutputDirectory.setGeometry(QRect(490, 24, 75, 22))
        MainWindow.setCentralWidget(self.centralwidget)
        self.groupBox_OutputSettings.raise_()
        self.groupBox_StdOut.raise_()
        self.tabWidget_Selection.raise_()
        self.pushButton_StartSeparation.raise_()
        self.groupBox_Settings.raise_()
        self.label_Authors.raise_()
        self.label_Title.raise_()
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        self.statusbar.setEnabled(True)
        self.statusbar.setSizeGripEnabled(False)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)

        self.tabWidget_Selection.setCurrentIndex(0)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"MVSEP-MDX23 Music Separation Tool v2.2.2-gui", None))
#if QT_CONFIG(statustip)
        self.groupBox_StdOut.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.groupBox_StdOut.setTitle(QCoreApplication.translate("MainWindow", u"Standard output", None))
#if QT_CONFIG(whatsthis)
        self.textEdit_StdOut.setWhatsThis("")
#endif // QT_CONFIG(whatsthis)
#if QT_CONFIG(statustip)
        self.groupBox_inputFiles.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.groupBox_inputFiles.setTitle(QCoreApplication.translate("MainWindow", u"Input audio files", None))
        self.button_inputFiles.setText(QCoreApplication.translate("MainWindow", u"Browse", None))
        self.tabWidget_Selection.setTabText(self.tabWidget_Selection.indexOf(self.file_selection), QCoreApplication.translate("MainWindow", u"File selection", None))
#if QT_CONFIG(statustip)
        self.groupBox_inputDirectory.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.groupBox_inputDirectory.setTitle(QCoreApplication.translate("MainWindow", u"Input directory", None))
        self.button_inputDirectory.setText(QCoreApplication.translate("MainWindow", u"Browse", None))
        self.tabWidget_Selection.setTabText(self.tabWidget_Selection.indexOf(self.batch_processing), QCoreApplication.translate("MainWindow", u"Batch Processing", None))
#if QT_CONFIG(statustip)
        self.pushButton_StartSeparation.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.pushButton_StartSeparation.setText(QCoreApplication.translate("MainWindow", u"Start separation", u"eh"))
        self.groupBox_Settings.setTitle(QCoreApplication.translate("MainWindow", u"Settings", None))
#if QT_CONFIG(statustip)
        self.checkBox_UseCPU.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.checkBox_UseCPU.setText(QCoreApplication.translate("MainWindow", u"Use CPU for infering instead of GPU (can be sluggish)", None))
#if QT_CONFIG(statustip)
        self.checkBox_UseLargeGPU.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.checkBox_UseLargeGPU.setText(QCoreApplication.translate("MainWindow", u"Use large GPU (at least 11 GB of VRAM is required)", None))
#if QT_CONFIG(statustip)
        self.checkBox_GenerateVocInstOnly.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.checkBox_GenerateVocInstOnly.setText(QCoreApplication.translate("MainWindow", u"Generate only vocal/instrumental tracks (faster)", None))
#if QT_CONFIG(statustip)
        self.groupBox_ChunkSize.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.groupBox_ChunkSize.setTitle(QCoreApplication.translate("MainWindow", u"Chunk size (default: 500000)", None))
        self.label_advice.setText(QCoreApplication.translate("MainWindow", u"Use lower chunk_size value if you have Out of Memory errors!", None))
#if QT_CONFIG(statustip)
        self.horizontalSlider_ChunkSize.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.label_ChunkSize.setText(QCoreApplication.translate("MainWindow", u"0", None))
#if QT_CONFIG(statustip)
        self.pushButton_AdvSettings.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.pushButton_AdvSettings.setText(QCoreApplication.translate("MainWindow", u"Advanced settings (spicy!)", None))
#if QT_CONFIG(statustip)
        self.checkBox_SingleONNX.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.checkBox_SingleONNX.setText(QCoreApplication.translate("MainWindow", u"Only use single ONNX model for vocals. (useful if you haven't enough VRAM)", None))
        self.label_Authors.setText(QCoreApplication.translate("MainWindow", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p dir='rtl' style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a href=\"https://github.com/ZFTurbo/MVSEP-MDX23-music-separation-model\"><span style=\" text-decoration: underline; color:#ffff7f;\">v1.0</span></a><span style=\" color:#ffff7f;\"> </span><span style=\" color:#ffffff;\">\u00a9</span><span style=\" color:#ffff7f;\"> </span><a href=\"https://github.com/ZFTurbo/\"><span style=\" text-decoration: underline; color:#ffff7f;\">Roman Solovyev (ZFTurbo)</span></a><span style=\" color:#ffff7f;\"> &amp; contributors<br /></span><a href=\"https://github.com/deton24/MVSEP-MDX23-Colab_v2.1\"><span style=\" te"
                        "xt-decoration: underline; color:#ffff7f;\">v2.1</span></a><span style=\" color:#ffff7f;\"> </span><span style=\" color:#ffffff;\">\u00a9</span><span style=\" color:#ffff7f;\"> </span><a href=\"https://github.com/deton24/\"><span style=\" text-decoration: underline; color:#ffff7f;\">deton24</span></a><span style=\" color:#ffff7f;\"><br /></span><a href=\"https://github.com/jarredou/MVSEP-MDX23-Colab_v2\"><span style=\" text-decoration: underline; color:#ffff7f;\">v2.2.1</span></a><span style=\" color:#ffff7f;\"> </span><span style=\" color:#ffffff;\">\u00a9</span><span style=\" color:#ffff7f;\"> </span><a href=\"https://github.com/jarredou/\"><span style=\" text-decoration: underline; color:#ffff7f;\">jarredou</span></a><span style=\" color:#ffff7f;\"><br /></span><a href=\"https://github.com/alphatoasterous/MVSEP-MDX23-Colab_v2\"><span style=\" text-decoration: underline; color:#ffff7f;\">v2.2.1-gui</span></a><span style=\" color:#ffff7f;\"> </span><span style=\" color:#ffffff;\">\u00a9</span><span style=\" co"
                        "lor:#ffff7f;\"> </span><a href=\"https://youtu.be/fYdgsFlTOH8\"><span style=\" text-decoration: underline; color:#ffff7f;\">a</span></a><a href=\"https://github.com/alphatoasterous\"><span style=\" text-decoration: underline; color:#ffff7f;\">lphatoaster</span></a></p></body></html>", None))
        self.label_Title.setText(QCoreApplication.translate("MainWindow", u"<html><head/><body><p><span style=\" font-size:28pt; font-weight:600;\">MVSEP-MDX23</span></p></body></html>", None))
        self.groupBox_OutputSettings.setTitle(QCoreApplication.translate("MainWindow", u"Output settings", None))
#if QT_CONFIG(statustip)
        self.groupBox_OutputDirectory.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.groupBox_OutputDirectory.setTitle(QCoreApplication.translate("MainWindow", u"Directory to save processed files", None))
        self.button_OutputDirectory.setText(QCoreApplication.translate("MainWindow", u"Browse", None))
    # retranslateUi

